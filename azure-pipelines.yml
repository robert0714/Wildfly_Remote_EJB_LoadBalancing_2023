trigger:
  - master
pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

steps:
  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: $(MAVEN_CACHE_FOLDER)
    displayName: Cache Maven local repo
    
  # 主機環境設定
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        sudo -- sh -c "echo '[your ip]     [your oauth service name]' >> /etc/hosts"
        sudo -- sh -c "echo '[your ip]     [your k8s service name]' >> /etc/hosts" 
        sudo -- sh -c "echo '[your ip]     [your container registries]' >> /etc/hosts"
        sudo -- sh -c "echo '{\"insecure-registries\" : [\"[your container registries]\"]}' > /etc/docker/daemon.json"
        
        cat /etc/hosts
        echo '目前路徑'
        pwd
         
        export BUILD_NUMBER=$(Build.BuildNumber)
        echo 'build 編號  #'${BUILD_NUMBER}
        
        timedatectl
        echo 'set timezone to Asia/Taipei'
        sudo timedatectl set-timezone Asia/Taipei
        timedatectl
        
        echo '查看docker daemon'
        cat /etc/docker/daemon.json
        sudo systemctl restart docker
        sudo systemctl daemon-reload
    displayName: 'set env'
        
  - task: Maven@4
    inputs:
      mavenPomFile: 'pom.xml'
      goals: 'clean install'
      options: '-U  '
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '8'
      mavenVersionOption: 'Default'
      mavenOptions: '-Xmx3072m  $(MAVEN_OPTS)'
      mavenAuthenticateFeed: true
      effectivePomSkip: false
      sonarQubeRunAnalysis: false
      checkStyleRunAnalysis: false # replaced by sonarqube
      pmdRunAnalysis: false # PMD does not support jdk11
      findBugsRunAnalysis: false #Findbugs does not support jdk11
      javadoc: true

  - task: Maven@4
    inputs:
      mavenPomFile: '$(System.DefaultWorkingDirectory)/cluster-example-client/pom.xml'
      goals: 'clean package spring-boot:repackage'
      options: '-U  --settings $(System.DefaultWorkingDirectory)/settings.xml '
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '8'
      mavenVersionOption: 'Default'
      mavenOptions: '-Xmx3072m  $(MAVEN_OPTS)'
      mavenAuthenticateFeed: true
      effectivePomSkip: false
      sonarQubeRunAnalysis: false
      checkStyleRunAnalysis: false # replaced by sonarqube
      pmdRunAnalysis: false # PMD does not support jdk11
      findBugsRunAnalysis: false #Findbugs does not support jdk11
      javadoc: true      
  
  - task: Docker@2
    inputs:
      command: 'buildAndPush'
      containerRegistry: 'orgId-registry'
      repository: 'ejblb'
      Dockerfile: './cluster-example-server/Dockerfile'
      tags: 'latest'
  - task: Docker@2
    inputs:
      command: 'buildAndPush'
      containerRegistry: 'orgId-registry'
      repository: 'ejblbclient'
      Dockerfile: './cluster-example-client/Dockerfile'
      tags: 'latest'   
  # A script task about tagging version number
  - script: |
      sed -i 's/ejblb:latest/ejblb:$(Build.BuildNumber)/1' cluster-example-server/k8s-yml/ejb-slb-deploy.yaml
      sed -i 's/ejblbclient:latest/ejblbclient:$(Build.BuildNumber)/1' cluster-example-client/k8s-yml/ejb-slb-client-deploy.yaml          
    displayName: 'tagging version number'
     

  # Install oc so that it can be used within a 'script' or bash 'task'
  - task: oc-setup@2
    inputs:
       openshiftService: 'ocp-4.11'
       version: '4.9.28'
    continueOnError: true    



  - script: |
      echo '$(Pipeline.Workspace ) = '$(Pipeline.Workspace)
      echo '$(System.DefaultWorkingDirectory ) = '$(System.DefaultWorkingDirectory)
      echo '-----------------------------------------------------'
      ls
      echo '-----------------------------------------------------'
      echo 'show result of ls $(Pipeline.Workspace )'
      ls $(Pipeline.Workspace)
      echo '-----------------------------------------------------'
      echo 'show result of ls $(System.DefaultWorkingDirectory )'
      ls $(System.DefaultWorkingDirectory)
      echo '-----------------------------------------------------'
      tree   $(System.DefaultWorkingDirectory)/k8s-yml/target
      echo '-----------------------------------------------------'
      tree   $(System.DefaultWorkingDirectory)/target
      echo '-----------------------------------------------------'
    displayName: 'inspect dual-validate folder structure ' 

  # A script task making use of 'oc'
  - script: |
      oc -n yournamespace get pods
      oc -n yournamespace get deployment
    displayName: 'use oc cli'
    continueOnError: true    

  - script: |
        oc -n yournamespace import-image orgId.azurecr.io/ejblb:latest --from="orgId.azurecr.io/ejblb:latest" --confirm --reference-policy=local
        oc tag image-registry.openshift-image-registry.svc:5000/yournamespace/ejblb:latest  yournamespace/ejblb:$(Build.BuildNumber)
        oc -n yournamespace apply -f $(System.DefaultWorkingDirectory)/cluster-example-server/k8s-yml/ejb-slb-deploy.yaml
        oc -n yournamespace apply -f $(System.DefaultWorkingDirectory)/cluster-example-server/k8s-yml/istio-basic.yaml

        oc -n yournamespace import-image orgId.azurecr.io/ejblbclient:latest --from="orgId.azurecr.io/ejblbclient:latest" --confirm --reference-policy=local
        oc tag image-registry.openshift-image-registry.svc:5000/yournamespace/ejblbclient:latest  yournamespace/ejblbclient:$(Build.BuildNumber)
        oc -n yournamespace apply -f $(System.DefaultWorkingDirectory)/cluster-example-client/k8s-yml/ 

        oc -n yournamespace apply -f $(System.DefaultWorkingDirectory)/multi-console/           
    displayName: 'deploy  by oc '